{"noir_version":"0.34.0+02fea6abe8637b9fb8f9535d1709b367d5e1da5c","name":"AdminStorage","functions":[{"name":"member_count","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/7VWTW/TQBDdNLZjJ4REFCSQOOwFiWNScgBOqapW6oFWao8IkBNvwJITV86mbfj1eMNO8rzelNI4K1k7tmfevPnYsWtss2p6d1lx1ZjlgcPsC5Udy7PnIHf0fpFKHs9iGYdJ/FtEqH4I8ge9ny1mYxmnMz4V05HIfozTxUzycTjj6SxZ8pHI5SQREZ/LUMZKXiLkJ5Df6P04y8JlziES9zxdSJ5O+ChHjeZoeAryW72HUorpjeQy5WEU8btY/uLprcgmSXq3jvu73oP8OoCcqPwM9X1vt9UPgFyl2B8HA4Vd3w/vXsCKfVIldiPHOPH/YhF/8uXrS622Re8QnlEdn+VXlwp/O728GaeROI6iTMzn/+p723osnvsfeK9NvItFksSTWGSn9/FcFnA9C66SD9imTzEe5ILvcQUGX6U31Pe93VYf546jsT2Dlws6NF9eWHiqXL3S8jpX5/Pr1cg4yWfGUwoQACFWYeAUMHEhPp4l6JcPBN1m5emOnCs+gEdmvrCRyGeTFfNb5VCssWI9HFZu4Dbw8iAnDbAbVsOn1wVfhN9h5Sa28fYM3l1W7oO2YUdYzMBiFiyTA+ag6sGseNaNPCj/78CfC3wdiz6egz5gvNdyh5XzY/642PqhBr7QP/rGmtVht/lz9TvkzcDGM7DJBnNEOq0tcdWBI3JXNfThfqj33m5rQNi0yAdxUMOV5tB6uF7LNAt/iisRRo/5WNaMOGw6GN8+ZkdTY9F8rRvxuqDzWe/b5m7d39gQd8ffC/cjBXsOvil/LvhrAj8HdPAc+IYO2VAeuqxce/MHoOqamOeXuKBP4ukZOvgNJZ0zvdvqhnOR8tO24OHsWs0G+pmEfDf8jY0DOgfAiXS+AO4l+HUNXPX+m+U9rYdmP/WeiivYTx/2VrWAvnfAlwPxk04TeLhw/xXiafnFeCgXhKvy72u55W+3cw27Luj4YBcYdoFRN1WDKy03WfGMVdn7WGv1HfgDyL4CnroPAAA=","debug_symbols":"1ZrdbsIwDIXfJddcxLHjJLzKNE1lA1SpKoifSRPi3deyNrCCgoAxxTeohZPmI05yHKs79TGdbOdvZT1brNX4ZaeqxXuxKRd1c7fbj9RkVVZVOX87/Vrp9sMf5OtlUbd3602x2qgxOEMjNa0/2kuk5gGzspqqscP96Ewc0HXaYF2UQnt9piUdfCcm0Ed1oAtiZs2dmNmYU/HrSIWHwUFDFOsT8dPRQT8+6A77QQ/XBh0MxQej1mlyFyB0Yhf4jBz+kLwZ9N/obQfm2R3gszugZ3dgH+7Aou7FFs21GWGD7mcEAw5nBN9I07Zxd7Txd7QJt7cxl9cmYQwJWX9tX3H9TgFNAI/x83ApFuz74bVOQzoWlsj0YqJhLAwIZjeC2VEwOwlmt4LZWTC7E8zuBbMHuewo2FdRsK+iYF9Fwb6Kme+RHCK70wN2ynytehvZAwzZ/3+tcsRxwGl2wCgGdMezB+rD0Y6MZHiUDE9i4D2cwVvJ8CwZPvOMLLXL27x3eWuiuzY1qiF73hmZ1S7BnndGlmbPPCMLdGTHtDgYHUvoBnn4R0luCmQzL4sk2TMviyTZM0/5k+yZl0WS7JmbcIqdBR+1OPOySJI987JIkj1zE06yC/ZVFuyrLNhXWbCvsmBfZcG+6sT66r65+yxWZTGppt3bW7Nt/X7yMtfma/nzSyP+Bg==","brillig_names":["member_count"]},{"name":"balance","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[{"name":"creditor","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"debtor","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/7VY30/bMBB2mzQk6Sq6n9qkPfgvQAU2tIc9gBjT9sKkoe09bdItWpqgxAXKX784+OjXIy1jJJaKL875u+/O57NDR9y0bvnrGLkHY7yRzqHpR49ruw1ijdrk2WmQZwd4domsjQPMCZS7sED4fgjytulPMyXjNFZxkMTXUYjqL0HeMf3neTpRcZbKcZAE6SSSkyCVWZos5FjLSRKFslCBirW8QLT3IH80/ZnK8uBXJIukZDGSafm3nJZdRuGOxHeFnM0LpYFzJad5NpO7O4j9A+Q3pj/K82BRuhZGVzKbK5lN5Tibp2GBEwOQ39KYUtHsXEmVySAM5WWsfsvsIsqnJbHbcF6b3hPL5aAlOjTPo8e1XQ/INYr94d2Bxu61w3tPYzvtYI+2Soxj9waL+JOtQfmzjEw6A7HcNp/MmO58mHNixmnucxij9X4iltsnuJh9O59kYXQUhnlUrCQU+r2p/Sve1gPwXnO803mSxNM4yk+u4kKt4Lo1uFruitXy4tRwqav5unmMr9Y7NM+jx7WqthIX22C7jFcPdJ6a/lkNTx0rqm23sfpanFVl67gsQP+zAB4QEqLZw88BB4mPW+P0qw1ODxg/4oz+NbhR93m8bJDJpi9WE7HJ4tkBO2SfbHUhJg7jNIQxC7g5DMthWDiPfG0xvtUFwbvHP08sC13TRf6pwScOPoujAxxa2Bf7WNgF2LLa8XdjPlsQA7sd+1U+W8w+vw8OxHIdSHcIY7jXfIblMyyc52yYxzlgTrSVcz7Y0m2L+YwXECGa/Xggf3tgry7XO+bXlG3c77ZY/R7As4B0Dkz/kLOgpdzd27R3SG77LOA2684Cj3Eawhit8ba4G/c6fL4vhqBvg01ewzbFCrE4B41FF2KswSeA6zB+XB/vEqeA8cXI2+LuGdcBHBrnZ2Nd7eK2Ma4W+GQxe/01PLQe7gNseE4SHunqy+ALI99eBs235/coCO+7NPNnb41Oi2dxld998B3j68M46fw0/braYBlHsa7Zbivc9zRsBLYpfj2w1wd+NuhgfvFzCeOhW9052OKHarUmLuPEP1jRN4fpYC6Tztj0deuGNYHiM6jBw5pQ7SP6+IV4b7lLzjbodIET6cSA+wftMlz9flHzntrGM8Jd+uW1k4fV+erDPxZssGWD/6TjA48ePF+CP3131R+KBeHq+LtG7rvr5/XYvCHouDDPY/M8tm56DVIj+2J1jzWZ+7jWOnf/Aj6A0qVBFgAA","debug_symbols":"5ZvRjtowEEX/Jc88eDz22LO/UlUr2IUVEoIVsJUqxL83oYmThtTRLnXlkV9QAteZM1bsOwzhUr2uVx9vz9v95nCqnr5dqt3hZXneHvb12eW6qFbH7W63fXsevl2p5gXUTX96X+6b09N5eTxXT+C0WVTr/WtziKa+wma7W1dPDq+LOzGja7VsXZBCc3ynNYp9KzagejWbCTGRolZMpPVQ/H1RATxMDgqCWA3E6dn147PusJt1npt10CZcGJWKkzsGbsWO6Y4c/yF5Pel/ojcBTOoANnUASh3APRzAourEFvXcHWFZdXcEAY7vCP9JmmYMf36MVl8YA18YM702CcMY8hyfXe2dbsWaoV9Cmm8BMHUAkzqATR2AUgdwqQP41AE4cQBUqQNA6gCpVzKmXsmYeiXjX1Yyc9gg9ZxXaegKEQe9VTk9VYjYzkiAfdDWXjR1XetDhUOmB0fgSXVfyam7LKmILF0RWfoisuQSsjSqiCyhiCx1EVliEVmaIrIsovYxRdQ+pojaxzxe+4AyXV8S6t7STJ6obCvGwVeHyQuT66aE/KBj5eEGzkLBrZIKDlLBtVRwlApuZsHnf0hxfhK8jjDRfCbf4Vin+r12svlsjen6F/XhuPlsrWB2EszuBLN7wewsl52UYHYQzK4Fs6NgdsG+SoJ9lQT7KmW+vxMHdqdG7C7zfcbbwM4wZv//+wwFHAcUZwfG8DwID1sI6vY8iDOS4a1k+MxLyehyzXursTpskxbHT6H5vEtJq1yEPfNSkk3PjnExaxVamxppnKhgP/CZ151R9szrzih75nVnlD3zujPKnnk/J8qeuQlH2TOv92PsnHk/J8qeuQlH2QX7Kgv2VRbsqyzYV1mwr7JgX2Wxvnqtz34sj9vlardu/wG3+di/DP4Qd/75/vuTWvwL","brillig_names":["balance"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"3715688037512703171":{"error_kind":"fmtstring","length":16,"item_types":[]}}},"bytecode":"H4sIAAAAAAAA/9VYTXPaMBCVg41lUwe3gEnSQ3ttT3IwNNyY6ef/8KTX/IT89bBGOzw2xBkUaSZoxiNb0r59eitpbUdqV/T2iux9Yuuhel54zMbW5m2l9ohlQvKMzoTnxZnwHJwJz9gjz+gIT6pje0/7jvZcqnb78VknGlOgB9Cv+oCk10dbZxYInW08KZcJv96w75o2s9wD8F4Sbh4G21BAfuq99gp8UTD/2j6uI3sVtl+BfaH2Af8FbbxQfkMbn+R/oC1Vh76Ijw4Tr7uA8TIFaKjABxbcJLzecxUszl22GAn/ufDfxdQKrqEttg8jaEvEmqHHL9CvYU7c/13MDbkMBBfCTUJoYWM/DIFtTIMaxkc0TI5oODyi4WR7/RM4xDvVQXh3mUADxxh8Mc8LGKOBRwLP39S+PYOTPgZdGHdMc+d1pF+2i4VdCWOGYJcKuxR4d2O311d7P7J64hng701ltZZntj/sH4tM7feiZ973hP0hCHbTYReA7XP9EvZlGE1WhD0Og93l9jII9m2nyUfA9vjFUFMcP6nDQv4mQeJb1335k33mwClE/pwI/+wL8+dUcCqhDffVVGBNBRZpOYPxHtfcf+Q0O4ET2pWOdiNHu1N4knYVjPd49jbIqXKcy9jRLne0OyVWpN0cxntcdwfazR3n4qrdpaNd5mjnus5d5zcHvngG+/xLhJxii82+OM8kMObB1nQuXqnDQjyvgafHXHHblyuugRPfM7dccErewGmxWJt2tV6umrq9b9tFBNjMiZ/xf8eNGCNzDOn2OYxuBr9dbkAnfv9G7fibgLngt0sG9r459unIPkvBlXm8pj9pfQX3PJcC7DZe5rH7R4DvE+xrFkQ3s+zbE+wzV6He33bvTzPhfyL0J00qwamENoxlJbAqgfUe7PAfGc+V8sIT7yz2rOIYAAA=","debug_symbols":"tdnPaoNAEIDxd9mzB//NzoyvUkrQRIMgGtQUivjuNW0ogZy/izDu7Hf7nXYLl7a5X0/92E1LqD62MEzneu2n8Zi2PQnN3A9Dfz29/g7p41Pmv/vLrR4f47LW8xqqUpLQjpdQSXrc7vqhDZUWe/K2qPlzUfV/UXz/TEJZUOGSCgsVjlRYqbBRYYfCklLhjApT8oSSJ5Q8oeQJJU8oeULJE0pepORFSl6k5EVKXqTkRUpepORFSl6k5EVKnlLylJKnlDyl5CklTyl5SslTSp5S8pSSZ5Q8o+QZJc8oeUbJM0qeUfKMkmeUPKPkOSXPKXlOyXNKnlPynJLnlDyn5Dklzyl5WZpi5Qwr51i5wMolVhasHLGyYmXDypjBjDG4H9NXPfd1M7TPJ4PuPp5fXhDW79vfybH8Aw==","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"make_payment","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"creditor","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"debtor","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/91aX2/jRBBfN07j2HXjtoB64h6M+POEStLC6RA89Gh7CAkd0p0Qz27j9iwlceU4d1c+AnwDJJ5Bgm8AEhLfgg8AbyDe4JFsbyf5ZbJ229Sru2Oldjfr2ZnfzM7szq5tiadlafxnqXZd1TUxX4hmV9Xt65VOhbzaJnFaLwjOJRM4JUhb4xSWchxe1phy2CdLS9X30jxMBkmeRL3ky7iL5G9C+0NVP8jTLDqJw2FvPK4dDsb/o14vfRx3t0J8Ngz7o2EeDvMoy8PjLO2HnS3k/RG0N1W9l8XdZMwjTIbnjJNBeJKlo1Mcd98gpj60X1H1fnx4AaKvDCL6DtodVX8yGI6Oj5OjJB7k4WHUiwZH8dvhGONpdJYMTsJ+msVh/jAaSNBSJDL8AdqvqTrK87h/mod5Gg5Hh3kWHeXh4yR/GKaP4ux4jBoZ/GRQ29+hfUPVd7IsOhvbvRs/CdNRHqbH4WE6GnSHOPBPaN+c1yrqdosV+mdRoUvW4kJ9a0Ghm9cQ+vqiQreuKHSy5nysGk0xXaNoHdtVv9vXK50mAK2U9+13b0ney2Zw70jeDTO825LvnvOUF+EnWXLvOFDPqJbyZcLhi+neQuN9Md139qGPEhTiIStP9W2M/+6qfior479AtaNH/c9Oj9JufKfbzeLhjLOhTcrKZfk5V+C3yfndG/V6yXESZwdPkmE+w7ep4Ut78ZJGH8Si26+Jp8N47arf7euV8+SJsNiKd5PhqgPNOqs5TtS/St/1AQ/KMxQrO9wvbGiTTFfMzkuV6xfOC8nnfuIrDIhJ2sSDcbvV4NkOQJYHOrsMo8sw4rhayTium9RjRRix7faa4k8YVkAmt6VTvS3bKBNjywG5Luhe5QFH8vLB7hZgcQET0bylal28+zBWAHYfsFc5b2Ux6YMOhvymg7Yj+SQLY3KVYQqgj+a4Bc8RL+fvM/4B0PtQ4zjiJRgvoeHFMcjflBtQPMjf7wHfFeBpa+hlvQr0Vc5BHeTftKb43ld90q4N0IUwEEbC3WC2sMT07CsK9MI5I9oa0KE8Sz0jOSi/BrQNNqap6dtVv9vXKx2M6z1VF8U19yeTOW+Zr5JMVxhbVzo6/+BxJ3+3GKYA+nBP5H7UYrxwnF0yjmNoimlua2pPbAFGkok6o6516Mc8iO8vRK/bXx6ousgPPdb3POwvnhn52v2FZKEfBgxTAH26/QXxXmZ/8Rj/KvYX5MnzLelDh8DXA562hr4ONMuwB8SqryXmddDFOLetqT1gghV44x7gsTEYHwNVF8VHg/UZjI+dy8aHoTOZNj74Po5rBsYH9eEZxGO8uD/gOLtkHMdgcK+crNPcp5pM5yLfeNZ7uEnfuCjH8wvshjG/W5E90HdaoPNVfM4vGafzOdO5gQcYSSbaUgCuotwgAB3wjgNzA6L5WtVXWftM2aDMvwPQwaR/B0x+mX8HUFMf5gb0HPFy/gHjHwA95iA4jngJxktoeHEMRbnBN8D3KrnB38DjW9XG3AB9hd+16XKDovUFc4MAZMqCZ0CUVxezuQHKrwGtx8agDepiNl7qGn3KcnCi+V7VujizNBjK5C0DLsFoiebHEnk6f3oe7nkNrSvae14ed3gng75Efbi/cB9dZrxwXFluzDHIOVgzY4PJ/kIY1kAm6oyYdfemFrTJ7zEvpXFE87OqdX5YE/P33SRft0b9Ahjw/Fu0RhHNb8DjV5C9DLQCxpuKA4PvbrZxXsgufO30ma6EQ7BxVIifK2bXoapjk+MmWRhPRKN7b2DClo0CTA7YkmNCnHgG4vo5JfrZC47DXNvkOu4W2IUwtcTU39wSXfg7LBm/r6r25B3wQT/JPx/Eg6Ps7DSPu5+mJ4KVJWhjqoaveTgdmQW/+aMilyG8NljRPOfyyq5wTLsplqLQNXmly6dVd6XLjyi4PbpgJ0PH5g5eOdXF7HaBWwDR/KHqolTtoitk3VZPY0huS8yHrnz2smpPQkB9xPVFluSxYAWdGh3zom8ddBNHwPCdEp7jkQa/WSCav1R90TtMVJr2c915AXN6HoT4LSXP2STtS6rNjXg/jma+yCv63sXSyOI00mHX4VnVDruheHGHXYd+ovmXPcNy/l2RMroH2G3HCPZtyZZWJh/sVwd5G4DPBhoMoHVGQ2PIDgHQ4DzyOxydX+M5CmnwzDf5ZkvporMtnq9JB1/DD8/XunvzmphfIFCGAD6C0V7W1/H8gsXSyNL5uqFzSQfnmvv6GvQTzWrJfDxrX5+cw0Ee92N+5rPE7Hpmwxj0daIpu+fU+Tq+Ty3ydaK5cYGv412/EMW+fghY+XcUNTH/jlcwvrI0gIcQ/19f5+dx9PU3LunrePZ9UX0d3/frfL3onSH6OiZ1SIPJH9G8s4Cvc374zY7sW1a2qIFNGs4Usw00S4CJaG7Be9bbYOs64yuf39U8p1J2MCD/OL+LMOMr59+/uc5UPxtk2aA/0bjsW2j6vW9N+z1nVh+yBfE9T6hp7XeKx9XZuABoHBjXZOOabN7kHHyg8LliNg6qXDNwruUa+x+ygbHgsTYAAA==","debug_symbols":"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","brillig_names":["make_payment"]},{"name":"split_group_balance","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"creditor","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"debtors","type":{"kind":"array","length":10,"type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},"visibility":"private"},{"name":"participants","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["split_group_balance"]},{"name":"admin","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/7VWTW/TQBC143X8EUoiChJIHPaCxAGhtCqIY0JVpAopSPSA4ObGDlhy7MretA2/Hm/ZSZ6XTVJUZ6Rox97ZN28+dhzbWoutVtdqim0ZXjDLLGjMDO8eg95X66QQPM1TkUZZ+juJ0fwQ9Ddq/bTIpyItch7F8zTn0yjnRZ4t+WVS61mWxLwSkUilvkSsd6C/UOu4LKNl7TxObnmxELyY8ctikccVHhyD/lKtkRDJ/EpwUdQ0Yn6Til+8uE7KWVbcrAL+odag/nUgGTIxI/U8fJgcBUCuVewPJycS29kP72FgNRukTWyvxjj1/2IRf/Llq5+UA4PdIbyjOj6qfwMq/PX8y9W0iJNxHJdJVe1qeJPcF8/9D7znOt5kkWXpLE3Ks9u0Eg3crgFX6h1r3acYD3LBfZRA4yvtRup5+DA5woHDFHZX4+WCDQ2WJwaeMlfPlL7K1Xl1cTcyTuuZsStRu4K3WgycAqYAtwX9dEvQB3AWOe/pAh7r+WIGPbSa+W1zKNoGn+SrAznxNE4yJz6cG7XDZzgAX4TfB796HpA303gPwJ5BLPoXeVsNEEvngDloezBLno6WB+n3FfjztNh1exds3gLGa6X3rX/ralvN/mdggx9mV7Ppar6xZmSLMdFebwMPBzAdqyn4IXchLilyaNH9Xg2tC1GU0c/kaxLF95lZtsGXbeAQwl7bd7IH8WFtQ3hPNu/VummeOaooHnBn/l64H0vYM/BN+XPBXw/4MbDB/go1GzpDeRiADd7Hfc5JT+PkaP4xtq5mQ2exbh/VaqobzhvKz4EBD2eCvEdd+pMG+fb8NWcGNh3gRDbngPsZ/Loartz/btgn2fpd89dxBfvpw+FdD/nr+Bj4YhA/2YTAw4XnbxBPz2/GQ7kgXJl/X+k9f/M5Vzs3ABsfzgXauUCrm6zBROmh1bxjbfY+1lr27h+HVXLwCw8AAA==","debug_symbols":"1ZrbbsIwDIbfJddcxHHi1LzKNE3lqEpVQRwmTYh3X8vawAoKAtYpvkEN/ZN8dQ6/G/WgZvPJfvlRVIvVVo3fDqpcTfNdsarq0uE4UpNNUZbF8uPyb6Wbn+wk367zqiltd/lmp8bgjR2peTVrLtHWDSyKcq7GHo+jKzGjb7XsfJBCc32ltZqzVmxBn9Vsb4iJNLViImMuxe8jxS+Dg4Yg1hfiwdFBvx50j13Q+V7QwdjQMGodJ/cM3Io90xU5/CF5HfTf6E0HZugOcOgO7NAduJc7cKg7sUNzb0Y41t2MIMD+jKAHaZo6/ok62RN1+PE65vbaBANdHUC+t6/4LIj1OWCQwa2xoKwLr/Ma4mPhrDWd2Nr+WBgQzG4Es6NgdiuY3QlmJ8HsXjB7Jpid5bKjYF9Fwb6Kgn0VBfsqJr5HEgd2r3vsNvG1mrnAztBn//+1SgHHA8XZm/ZC03B+u0aAE7yRDI+S4RNPx6LLNe2txpmwTdaHDX32tNMxp32EPfF0jO2ZHeNiNmF1sEHqPagT7Acu8dwtyp547hZlTzx3i7JbweyJn4lE2RM34Sh74vl+lD3xM5Eoe+ImHGMnwb5Kgn2VBPsqCfZVEuyrJNhXSayvHuvSZ74p8kk5bz9lWeyr6cWXLbuv9c+dWvwN","brillig_names":["admin"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"parameters":[{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"]},{"name":"set_balance","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"creditor","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"debtor","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"5Z3bbhvHEkX/Rc9+6K5LX/IrBweBnTiBAEMObOcAB4b/PZSiGVFmsxomOWZt1ksgxdPqtYec3lV9qfl69/v7d3//+ev9wx8fP9/98p+vdx8+/vb2y/3Hh91vX7+9uXv36f7Dh/s/f93/33fp8T85PV3/+a+3D4+/fv7y9tOXu19yJXlz9/7h98cfWXZ/4Y/7D+/vfqn87c3BxZ3r87Vd63ppfvz54FpJvT1fLDm9XN1lcHEpqTxfXArR/sX/fXOX89nkOeX14rR38fbsdP5dr7zc9T6765lk/cOckk1ee+7PF9deDsj5guS7m/4a/bED2boD3bqDsnUHddQBNV46oKZkdyBU8vJdptIn3+WqyxNeaj34RrQxDdELzSu5j236j7ehdEKb4RhBPS+3l/re7R1/FLTcqF7zyyfxeBsOP2NNy8fW23otp9FN7drWB7jIy03l3IdXvwxU6eVi6k8qKYRKDqFSQqjUECpLCJU1hMoWQmWPoJJTCJUhYh8OEftwiNiHJYTK82OfnGSZXMi7BHGik5M+X8x5khaWutyS0vbSzpafwAsqeEUFb6jgHRRcEir43O1nc0K7Oc02BN/1cHi1lrbgaE3ZnkFSkWWWZvcjf3s9gyQEzM7A7ALMrsDsBZi9ArM3YPaOy64JmB3YVxXYVxXYV9X5+F76yl7Td+zF+bPadGXv+Xv2n/+slhWn5jJhp2URVbnsTTc8LekWwkVnXHQBQRc5QFdc9IKLPo9+yyv0xzbthDb9x9vU4cjNKS13ihNPbivA7GnNIVRSCJUcQqWEUKkhVJYQKmsIlS2Eyh5BZQsR+7QQsU87P/a5zhJcY1RwQQVXVPB5HCF62RT4YrObrQKzN2D2jsveEzB7BmYnYHYGZhdgdgVmB/bVDuyrHdhXc3I+wFvLtbvw1Te8tV6b088fai61dJhTAWavwOwNhP1w9TCnjsueEzD7fITXV+xPjeiURuOgNa8GtJsQm+wfp1bXE+09fz87lsf1ES7ag27eQ9m8h7p5D23zHvrWPYxLKly0h7x5D7R5D5s/07T5Mz0+cM+0LgcwSbF7AFg6yOMT97cns8aQ2WLI7CFkjk/d357MHEMmxZDJMWRKDJkxoiCOEQVxjCiIz4+CrrPJIXNHJZcES55hyecRhU7Jr7WGJIwML8jwigxfkOErMnxDhu/A8JqQ4TMyPLLDKrLDKrLDqvNx3twfU5yPNub+mPLzR5sfWHPPndcq9X0/yX1edS8ETc/Q9EcGnL58N5nTK/qnRuNQmnNZG0nGn1AZ1x+4PZk1hswWQ2YPIfNIEYubk5ljyKQYMjmGTIkhM0YUVGNEQfX8KOhK6yG1wZJ3VPKWYMnnHjQtqkZlmQbK1NqrLgY4iZbktiSdvFNw90Cv+/Mbt+/nOY4chxdet9pLZxt+sv/1yKH1S/bQNu+hb93DkWPal+whb94Dbd4Db96DbN6Dbt7D5s903/yZPnKsVde5N1Zt+DFS7xFkUkoxZOYYMimGTI4hU2LI1BgySwyZNYbMEFEQpRhRUD4/CrrOFAflDEtOsOQMSy5T8ua1JBFlRYYvyPAVGb4hw3dgeErI8BkZnpDhGRke2WEJ2WEJ2WHJ+ThvbScndj7aWNvJiX/+aHO5Lc3EAk2v0PTzAafLPv1To3pKo3ZKo/GQUnitn7WfIZ6wEkhHDoRfsoe8eQ+0eQ+8eQ+yeQ+6eQ9l8x7q5j20zXvY/JnWzZ/pI6dF61qslOtsUxbClPKRc6U3J5NjyJQYMjWGzBJDZo0hs8WQ2UPIPHI2/eZkxoiCSowoqJwfBV1pRbgILLnCkhdY8nlEUfuM/Fpz7KUhw3dg+JqQ4TMyPCHDMzK8IMMrMnxBhkd22IrssBXZYZvzcd7cP9Ccjzbm/oH280ebC65htwpN36Dp5wNOe7WN/LFRT6c0yqc0Gg8pLa0rgU3zQaPxo9zWqRbuTAeNyimN6imN2imNxp9TXzNw3p+YQp3D4iMngW9OZo4hk2LI5BgyJYZMjSGzxJBZY8hsMWTGiIJyjCgonx8FXWcJijPBkjMsucCSDyMKSWlpJCnPZgg6rU9S57r3kJZ/u5iP/33WxbWKDPL4lKMkLuv9KTcw3I3PQ96eTI4hU2LI1BgySwyZNYbMFkNmDyFz/Hr625MZIwriGFEQnx8FXSlbYYElV1jyAks+96DmNvEcn4qWvC5JS67fv4uNx4eEhdKCJaT1oFE9pVE7pVE/odH4wK1QzWujXvAH5fGp39uTSTFkcgyZEkOmxpBZYsisMWS2GDJ7CJklRhRUYkRB5fwo6Eo5VWFYcoElV1jycUSxW7lZyFlkQj5ZXS7T8X+3HOY1yR+fPpTdMLjCtxsY7sbnFG9PpsSQqTFklhgyawyZLYbMHkLm+I27tyczx5AZIwpqMaKgJmfLvFK20hSWvMCSV1TyPvUgyW4Tz/G7okV04RFNr+7OU6PxZ6V5XZJWIfwBbHwG+vZk9ggyZXxq+/Zk5hgyKYZMjiFTYsjUGDJLDJkhoiBJIaIgSedHQdfJPyQnWPIMS06w5HMP2qs75ytblXxkLOrrvuFCjD8W5R5CJqUYMnMMmRRDJseQKTFkagyZJYbMGkNmjCiIYkRBfH4UdKVUgjMsOcGSMyz53IN0dnz4aonn+AXOUtcepOpkdbqWZRRoRDZMy3n5uy2rHMBkTzDkCYY9wYgnGPUEUzzBVE8wzRNMdwSjnkZg9TQCq6cRWD2NwOppBFZPI7B6GoHV0wisnkZg9TQCF08jcCHf2URb30HVOh3As2/4Ui148Q3fl6+Y9r3kdoFXZHjnGbQNX5HhGzJ8B4avCRk+I8M7d1gb3rnD2vDIDluRHbYiO2xFdtjq3GGVX+DFvrjvFkqeL+6sh0qd2/FRpY/wzbkd2/DO7diGd27HNrzzTadmtt6Kb3gzW2/VN7xpCq0hw3dg+J6Q4TMyPCHDMzK8IMM7d1gb3rnD2vDIDtuRHbYDO6wmYIfV5NxhL5ata3Jux1bapcm5Hdvwzu3Yhnduxzb8tETidQsaWdm6pu4b3srWNTsvJWWaQs7I8IQMz8jwggyvyPAFGb4iwzt3WBveucOa8ITssITssITssITssOTcYS+XrZNzOzbTLnJuxza8czu24Z3bsQnP0zdlXfe9N2a2zuQb3szWmX3Dm6Zw5A3aIPCKDF+Q4SsyfEOGd/5+MxNeEjK8c4e14Z07rA2P7LCC7LCC7LCC7LDi3GEvl62Lczs20y5xbscmvDq3YxveuR3b8GNTSLyU5JLUutds/UgJCzfwZrZ+pOSFG3jTFI6UyACBb8jwHRj+SMkOEPiMDE/I8IwM79xhbXjnDmvDIztsQXbYguywBdlhq3OHvVy2Xp3bsZl2Ved2bMM7t2Mb3rkd2/BDU+C+FtDm3t1m6+OSGn7gzWx9XCXDD7xpCuMqGSjwGRmekOEZGV6Q4RUZviDDO3dYG965w9rwyA7bkR22IztsR3bY7txhL5etd+d2bKZd3bkd2/DO7diGd27HFnwZl9TgSkuiybXO4FNdcF6/G2sIv5t3Xd54tZsIzBN4KX25WGo6gM+u4ZXWqQZlOoAn3/CpWvDs+2vz4mjKPDEFSut7CYnLgVLxrbTp+oD0fACvyPAFGb4iwzdk+A4Mn53bsQ3v244n8L7teALv3I5teGSHzcgOm5EdNiM7bEZ22IzssOOSGrvZoCUJ4F3G7DXhHZfUcANvJ7zjkhp+4M2Ed1wlw8/X5nIJ77ikhh+l9tNdkeEbMnwHhueEDJ+R4Z3bsQ3v244n8L7teALv3I5teGSHZWSHZWSHZWSHFWSHFWSHHZfUYM7r8jQrTeCvtR+7jEtq+IG39mOXcUkNP/DWtp8yLqmBAt+Q4Tsw/LhKBgp8RoYnZHhGhnfusDa8c4e14ZEdVpEdVpEdVpEdtjh32Ivtxy7FuR2bG2uLczu24Z3bsQ3v3I5t+LEpEC2F2pi0XHGqwVyeHpfUcANvL0+PS2r4gTeXp8clNfx8bS63PD0uqeFHqTkXNy6pgQLPyPCCDK/I8AUZ3rkd2/C+7XgC79uObfjm3I5teGSHbcgO25AdtiE7bEN22IbssEdKaqS08HASt/uxj5TU8AJvJ7xHSmq4gTcT3iMlNdx8bS6X8B6pv+FGqfl0HympAQKvyPAFGb4iwzdkeOd2bMHX5NuOJ/C+7XgC79yObXhgh60J2GFrAnbYmoAdtiZgh60J2GHruEoG9bwkAdSny9PXSnjruEqGG3gz4a3jKhl+4K2Et46rZPj52lws4a3jkhp+lNpPd0GGr8jwDRm+A8NTQoZ3bsc2vG87nsD7tuMJvHM7tuGRHZaQHZaQHZaQHZaQHZZhHfbb7rf/vf10//bdh/efd20e//Hvh9++3H98eP71y///+vdfdhf/Aw==","brillig_names":["set_balance"]},{"name":"in_group","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[{"name":"group_member","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/7VXTW/TQBBd13ZiO0QNXxJIHPYIl5IUkCrBoVUBCZCKRCWQOABu7BRLjl3Zm37w6/G2O+3z1IkKtVdydmLPvnkzszNeW+JiWObSw4V7fNC9bTOPbzcmLWKNLc5T/zg3cMZa4vR6g7yXK5lkiUrCNPkTR6j+AOTnZn6/yKYqybNqzc/DIl8cyWmYyTxLz+RBXMlpGkeyVKFKtHyGcE9BfmPmfZUX4WEsy7SiMZZZ9Vsty0/iaEPis1LOF6XSwIWSsyKfy8kGYn8E+bGZd4oiPKt4RvGpzBdK5jN5kC+yqMSFX0F+YuZQqXh+pKTKZRhF8iRRv2V+HBezithlPHMz+9W1ZmTKz7b5P77dmPhArlXsrZevfFHfS23zdrvBHvcrjF3vAov4k61hddlGJh3P5IievzX3Se8+3KPc3qmukZHD4/nno2kexTtRVMRlbfOsaiw4borX+we8Rxxvb5GmySyJi3enSalquP0GXC2viau9i/4gF3yOw2d8td62+T++3Zhg/3IMdp/xckGHYnuvgaeO1UMjX8bqQ7l/3qJ2q2bzPwnwgZAQ7b49XHCQ+PQbnH64wumO+G0OgRPa6qjYX/A8OCCTzUDU89ZmI8ONSPZ5YeiYeIzTCO5h8XkMy2NYuI4aVJfN1BJXzXGZf76JcQf2N+8afOIQsDh6wAH3XUv2x0LUa4vs9cCuDb5bLcc+gLhbwMUGTqTzzMxN9T4U9Xpv4t5m3lbVJdkMRH3vt12XNrNPtrAuA8ZpBPcox+vwHPlyfJvhj8T1fA3ZOsISDEs0YHEOQ3H9gKM5bwFuHzCdBn0XdHYB47WR12EN7pUe4+swvmibdPDFTNjcJ3uJPYo3vvQF6NkMm9YMjB2eBxv4IJYe2O94vevDAn31XB4WzHfIlziMbnJWsBpsWQ0cOuqpE4qLHq6o5w/7K+l8MvOyvmKbIPWBu+N1wn1Tw34H2xQ/F+wNgJ8DOrg3A6YzAFmPpj7AD7Rt54TXi8Pso289poPvKNL5ZuamvGE/wY8fjof9RNdRjz6OIN59r86ZdNaAE+n8ANxfYNdluPp51vCcxqqeSXvv/NzQzT68eDd7V/45YMsB/0knAB4u/E/Bn4FX94diQbg6/p6RB97ydS5bNwIdD9b5bJ3P8qZzMDVyIOo11ubex1zrvfsXCF+Ii6ITAAA=","debug_symbols":"5ZvdjtowEIXfJddczHg8Y3tfpapWsAurSAhWwFaqEO/ehOavIXW0S6k88g1K4Nj+xol9xiY5F6/r1cfbc7nb7I/F07dzsd2/LE/lflednS+LYnUot9vy7Xn4dQH1R7jKj+/LXX12PC0Pp+IJnbGLYr17rQ/JVhVsyu26eHJ0WdyIA7lGG9h1UqyPb7QWgm/EFqFXBzshFgFpxCLGDMXfFwXC3eQI2IlhIH48O97f647aXg9zvY7GdhUTQJzcBQyN2AW5ITf/kLzq9D/R6wbo0Q3YRzfAj25A7m6ACVoxk5m7IzhAe0cI0viOcJ+kqcv4L5QJny9j4Atlpsem8aYfQjJz+Qy2Y9Nhf/WcmRqb3PYtBt9pq8szVS/7btCL7YcmYZhU95Mb9GITrlGaLKKkLKK0WUTJWUQpWUTpsojSZxFlyCFKgiyizCL3oSxyH8oi9yGbRZT35z4Itt2QwGpRORMnATdiQhOvWFzbJeIHS1WPV3DRCu60gnut4EEpuAWt4PNub3gO3PlJ8KqFiV0n8S0OO8D4rhNb23JUh+NdJ2sUs5NidquYnRWzi2J2p5jdK2YPetkZFLMr9lVW7Kus2Fc58fldQsfuYMye+DzjuWMPOGKX/z/PSIfjUGbYTftoBZMMthuufwML6kU3etFJCbq1N+hWLzrrRU88+43N7JJ29sumc1Sm8ZNKkrYrMbi/s7vEs99ge3aKi4OBbhfckIwDTTxVjqUOLvFUOcqeeKocZbeK2RPfgoqyJ75EibInbsJR9sS3oKLsipeGPnETjrIr9lWv2Fe9Yl/1in3VK/ZVr9hXvVpfvVRnP5aHcrnarpuXpDYfu5fBO1Onn++/f6nEvwA=","brillig_names":["in_group"]},{"name":"remove_from_group","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"member","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"approve","type":{"kind":"boolean"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"5Z3bbuM4DIbfxde9ECmREvsqi8UgnWkHAYJ00HYWWBR997W7sZzYDo1JTyR8UyQNZX1SFP0SRYHPzY/bm98/v233d/ePzfVfz83u/vvmaXu/b989v1w1Nw/b3W7789vxv5vQ/YHwav/4a7Pv3j4+bR6emmvImK6a2/2P7mVM7RPutrvb5jrHl6uJscR8sBXK1RS61xPbFKQcjBOEwVrSjDFz4IMxM+Kx8d9XDcCbySFANQ5Hxh/Pjm/v9Rz7XpelXgdM9cExBJ08C8jBOAtPyOM7kredforeVZA+ugL66Ar4oyvIcxVgDHQohBHj0sjP/ViGtoqhhgIz1sQlHKwpB9DHD6WEvXFKcTx+imN28cuOwTE7OGZHx+zRMXtyzE6O2dkxu2NdRce6io51NTrW1Wh8jmSp7DmM2Y2P90KVXWDM/vnjnStOBtbZu+fVR8Ow/4sAHXwKnuHBM/yZpSRKhU9Zh0/I0LswkGXBhZGpd+xwzmNHQFpeHFI4punKpAvK0AVlzixCSr8DxxTKwg4c+46SPPx+oeuG6fdG/cwAMjw2hrlOFSrVb8Pp+DuWWevBPxUGY5TXVuZVtLKsopWyhlZSWEUrYRWtxFW0Mq6ilWkVraRVtHIVax9axdqHVrH2obevfSAknt2UzbZz2DvEo13W7IM5913CJZ/s9VpwDl7BwSs4egWPXsHTIjguPB+QeyckYCknNczQhOox4VAWYhVi7n0fUY7moPB6TM7509GxVHRaQG/nz9670r4sI+9Knh/oSfpJFwkWx8sXuZVzdMyeHLOTY3Z2zJ4dsxfH7OKXvQTH7OCY3bGuFse6WhzrajE+v2vH5GL8t6odk8vn/1b/5LA2VmOIOY03HxI9wyfP8OQGvsAEnj3DZ8/wyythPIna78rIn5dpHaCXFIJLCuElhc5MXMzVayJf5/ABxOqjxhjHXyIE/nT6d/P5QJgfTlRqgA/DQoBP5t65VU4vHU1NC0BPXoDSGGb+YthXwYAlGLQEEy3BJEswZAmGLcFkSzDFEoylGRgtzcBoaQZGSzMwWpqB0dIMfOY+jZnFWKlOnyLTG9rFNjxnDV5sw0s/xEjC2N0GZ67UOIEHz/DoGT56hk+e4ckzvHGPgQ5vXGF1eOMKq8N7VtjkWWGTZ4VNnhU2GVdYigN80o0lQs8hkaYtNS7HZ1v6Cm9cjnV443KswxuXYxWejIckaWEOQLbjHAirq4HiZLdOtoOSKGQN3nhU0qBoFOOCKGC9fy8YedLS5DeWBsh4cLAObzw6WIc3Hj6mwxuPD9bhjQcIq/BsXI51eMdhh8DGY4R1eONyrMN7Vlj2rLDsWWHZs8KyZ4Vlzwqbly8To9nj6Rxtw6vH02duWZqBV72gmTzDs2d44xe6dfjiGV4cw5fgGR48wxtXWB3euMLq8J4VtnhW2OJZYYtnhS3GFfb9jqeLcTlWzxnFuBzr8MblWIc3Lsc6vPGkGOrxtNjOiqEfT4vttBj68bTYzhOwAG88Mca7na1jMJ5GQ3MkYjCen0qHN56gSoc3nqFKh0+e4Y3LsQ5vPEmVDm88S5UO7zhtDwbjcqzCg2eFBc8KC54VFjwrLHhWWHCrsC/tu382D9vNze72kID87vf++1E+8qd/f/3/SWv8Hw==","brillig_names":["remove_from_group"]},{"name":"add_to_group","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"member","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"approve","type":{"kind":"boolean"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"5Z3bbhs5DIbfxde5ICmJFPMqi0XhtElhwHCKJF1gEeTd60k98mEmnNY5kZibwm6o0SeNrF+iKPBx8e366uf3L6vNze394vKfx8X69uvyYXW72X57fLpYXN2t1uvV9y+H/72A7h+EZ/v7H8tN9/X+YXn3sLhEoXyxuN586z6mvH3CzWp9vbiU9HQxMNYkO1st0kyx+zywzaB1Z5wR9taaR4yZgXfGzESHxv9eLBBfTY6AzRgOjN+fnV7f65L6XtepXkfK7cEJwCYXRd0Zi/KAPL0h+bbTj9G7CvJ7V1DeuwJ+7wpktIJa+veGVWRq5Es/lnFbxb6GiiPWhSvsrIsA2uOn5Ey9cc7pdPzUwOwal50gMDsGZqfA7Ckwew7MXgKzc2D2wLpKgXWVAutqCqyryfkcydrYBU7ZnY/3Whq74in7x493bjiCbLN3z2uPxv3+LyF28Bkiw2Nk+BeWkrUV0oNxOQqfibF3YRDrhAtDSu/YYZFTR0CeXBwqHO1yuzL5jDLljDLjixBN7c0dOjbGd+DUd5TKvlOx64bhgwu059b9W4OxTtXSXpdyPnzHOmq990/B3pj0uZUyi1bWWbRS59DKArNoJc6ilTSLVqZZtDLPopVlFq2cxdqnzGLtU2ax9imvX/sgZB7dlI22M0G/J0s48WCWvku4ytFebwvOEBUco4JTVPAUFTxPggtPgBP3TkikWo9qGKGB5jFhqBOxCkl6L0DSgzkIno/JWT4cnWpDLxPo2/mz965sP9YT74qMDnSC3JchkMnx8kluZUmB2XNg9hKYnQOzS2D2Gphd47JXCMyOgdkD62oNrKs1sK5W5/O7dUyuzn+r1jG5fvxv9W8Oa1MzxiT5dPOhKTJ8jgxfwsBXHMBzZHiJDP8HK+F6CN+V0b8vs3WAnlMIzylE5xR6YeIiaIXy5zl8kBoHUkqnLxGBP5z+zXw+COPDCdvlHcKp349wb1uPLx0NTStiT16x5FOY8YthnwWDnmDIE0zyBJM9wRRPMOwJRjzBVE8wnmZg8jQDk6cZmDzNwORpBiZPMzCJ78VYbU6fqjSAr77hWSx49Q2v/RArCqfuNkwQGR4jw1Nk+BQZPkeGL5HhnXsMbHjnCmvDO1dYGz6ywubICpsjK2yOrLDZucKWtIfPtrEm7Dk0lWFLncvxiy19hncuxza8czm24Z3LsQlfnIckWWEOWHzHORRqroaSBrv14jsoqYBY8M6jkvaKVlKaEAVq9++VEg9amuPG0mBxHhxswzuPDrbhnYeP2fDO44NteOcBwiY8O5djGz5w2CGy8xhhG965HNvwkRWWIyssR1ZYjqywHFlhObLCyvRlYnF7PC3JN7x5PD1+y9IPvOkFlRIZniPDO7/QbcPXyPAaGL5CZHiMDO9cYW145wprw0dW2BpZYWtkha2RFbY6V9i3O56uzuXYPGdU53JswzuXYxveuRzb8M6TYpjH0+o7K4Z9PK2+02LYx9PqO0/ABLzzxBhvdrZO4DyNhuVIJHCen8qGd56gyoZ3nqHKhs+R4Z3LsQ3vPEmVDe88S5UNHzhtD4FzOTbhMbLCYmSFxcgKi5EVFiMrLIZV2Kftt/+Wd6vl1fp6l4D85ufm60E+8of/f/z+y9b4Fw==","brillig_names":["add_to_group"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"AdminStorage::make_payment_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AdminStorage::make_payment_parameters","fields":[{"name":"creditor","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"debtor","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]},{"kind":"struct","path":"AdminStorage::balance_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AdminStorage::balance_parameters","fields":[{"name":"creditor","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"debtor","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AdminStorage::admin_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AdminStorage::admin_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AdminStorage::set_balance_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AdminStorage::set_balance_parameters","fields":[{"name":"creditor","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"debtor","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"AdminStorage::add_to_group_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AdminStorage::add_to_group_parameters","fields":[{"name":"member","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"approve","type":{"kind":"boolean"}}]}}]},{"kind":"struct","path":"AdminStorage::split_group_balance_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AdminStorage::split_group_balance_parameters","fields":[{"name":"creditor","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"debtors","type":{"kind":"array","length":10,"type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}},{"name":"participants","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]},{"kind":"struct","path":"AdminStorage::member_count_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AdminStorage::member_count_parameters","fields":[]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":64}}]},{"kind":"struct","path":"AdminStorage::remove_from_group_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AdminStorage::remove_from_group_parameters","fields":[{"name":"member","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"approve","type":{"kind":"boolean"}}]}}]},{"kind":"struct","path":"AdminStorage::in_group_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AdminStorage::in_group_parameters","fields":[{"name":"group_member","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"boolean"}}]},{"kind":"struct","path":"AdminStorage::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AdminStorage::constructor_parameters","fields":[{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"group_members","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"group_balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"member_count","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}}]}]}},"file_map":{"29":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod keccak;\nmod sha256;\nmod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    __pedersen_hash_with_separator(input, separator)\n}\n\nfn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    __pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n    // Same as from_field but:\n    // does not assert the limbs are 128 bits\n    // does not assert the decomposition does not overflow the EmbeddedCurveScalar\n    fn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n\n","path":"std/hash/mod.nr"},"34":{"source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"58":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"59":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"73":{"source":"mod test;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\ncontract AdminStorage {\n\n    use dep::aztec::{\n        prelude::{Map, PublicMutable, AztecAddress},\n        macros::{storage::storage, events::event, functions::{public, initializer, internal, view}}\n    };\n    use dep::std::hash::pedersen_hash;\n\n    #[storage]\n    struct Storage<Context> {\n        admin: PublicMutable<AztecAddress, Context>,\n        group_members: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n        group_balances: Map<Field, PublicMutable<Field, Context>, Context>,\n        member_count: PublicMutable<u64, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(admin: AztecAddress) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.group_members.at(admin).write(true);\n        storage.member_count.write(1);\n\n        // Emit event for the admin assignment\n        context.emit_unencrypted_log([admin.to_field()]);\n    }\n\n    // Helper functions to read variables when testing\n\n    // Read the admin\n    #[public]\n    #[view]\n    fn admin() -> pub Field {\n        storage.admin.read().to_field()\n    }\n\n    // Read the group members\n    #[public]\n    #[view]\n    fn in_group(group_member: AztecAddress) -> pub bool {\n        storage.group_members.at(group_member).read()\n    }\n\n    // Read the member count\n    #[public]\n    #[view]\n    fn member_count() -> pub u64 {\n        storage.member_count.read()\n    }\n\n    // Read the balance between two addresses\n    #[public]\n    #[view]\n    fn balance(creditor: AztecAddress, debtor: AztecAddress) -> pub Field {\n        let key = pedersen_hash([creditor.to_field(), debtor.to_field()]);\n        storage.group_balances.at(key).read()\n    }\n\n    // Functional methods\n\n    #[public]\n    fn add_to_group(member: AztecAddress, approve: bool) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        storage.group_members.at(member).write(approve);\n        if approve {\n            storage.member_count.write(storage.member_count.read() + 1);\n\n            // Emit event for the member addition\n            context.emit_unencrypted_log([member.to_field()]);\n        }\n    }\n\n    #[public]\n    fn remove_from_group(member: AztecAddress, approve: bool) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        storage.group_members.at(member).write(approve);\n        if approve {\n            storage.member_count.write(storage.member_count.read() - 1);\n\n            // Emit event for the member removal\n            context.emit_unencrypted_log([member.to_field()]);\n        }\n    }\n\n    // This sets balances but only between two people\n    #[public]\n    fn set_balance(creditor: AztecAddress, debtor: AztecAddress, amount: Field) {\n        assert(creditor == context.msg_sender(), \"cannot adjust someone else's balances\");\n        assert(storage.group_members.at(creditor).read() == true, \"Creditor is not in group\");\n        assert(storage.group_members.at(debtor).read() == true, \"Debtor is not in group\");\n\n        // Hash the addresses together\n        let key = pedersen_hash([creditor.to_field(), debtor.to_field()]);\n        let balance = storage.group_balances.at(key).read();\n        let amount_to_write = amount + balance;\n        storage.group_balances.at(key).write(amount_to_write);\n\n        // Adjust the balances\n        let creditor_debtor_hash = pedersen_hash([creditor.to_field(), debtor.to_field()]);\n        let balance_creditor_debtor = storage.group_balances.at(creditor_debtor_hash).read() as u64;\n\n        let debtor_creditor_hash = pedersen_hash([debtor.to_field(), creditor.to_field()]);\n        let balance_debtor_creditor = storage.group_balances.at(debtor_creditor_hash).read() as u64;\n\n        if balance_creditor_debtor > balance_debtor_creditor {\n            let difference = balance_creditor_debtor - balance_debtor_creditor;\n            storage.group_balances.at(creditor_debtor_hash).write(difference.to_field());\n            storage.group_balances.at(debtor_creditor_hash).write(0.to_field());\n        }\n\n        if balance_debtor_creditor > balance_creditor_debtor {\n            let difference = balance_debtor_creditor - balance_creditor_debtor;\n            storage.group_balances.at(debtor_creditor_hash).write(difference.to_field());\n            storage.group_balances.at(creditor_debtor_hash).write(0.to_field());\n        }\n\n        if balance_creditor_debtor == balance_debtor_creditor {\n            storage.group_balances.at(creditor_debtor_hash).write(0.to_field());\n            storage.group_balances.at(debtor_creditor_hash).write(0.to_field());\n        }\n\n        // Emit event for the balance set\n        context.emit_unencrypted_log([creditor.to_field(), debtor.to_field(), amount.to_field()]);\n    }\n\n    #[public]\n    fn make_payment(creditor: AztecAddress, debtor: AztecAddress, amount: u64) {\n        assert(storage.group_members.at(creditor).read() == true, \"Creditor is not in group\");\n        assert(storage.group_members.at(debtor).read() == true, \"Debtor is not in group\");\n        let key = pedersen_hash([creditor.to_field(), debtor.to_field()]);\n        let balance = storage.group_balances.at(key).read() as u64;\n        assert(balance >= amount, \"Insufficient balance, or paying more than is owed\");\n\n        let amount_to_write = balance - amount;\n        storage.group_balances.at(key).write(amount_to_write.to_field());\n\n        // Emit event for the payment\n        context.emit_unencrypted_log([creditor.to_field(), debtor.to_field(), amount.to_field()]);\n    }\n\n    #[public]\n    fn split_group_balance(\n        creditor: AztecAddress,\n        debtors: [AztecAddress; 10],\n        participants: u64,\n        amount: u64\n    ) {\n        assert(creditor == context.msg_sender(), \"cannot adjust someone else's balances\");\n        assert(storage.group_members.at(creditor).read() == true, \"Must be part of the group\");\n\n        let amount_per_participant = amount / (participants as u64 + 1);\n\n        for i in 0..10 {\n            let debtor = debtors[i as u32];\n            if debtor.is_zero() {\n                continue;\n            } else {\n                assert(storage.group_members.at(debtor).read() == true, \"Debtor is not part of the group\");\n                let key = pedersen_hash([creditor.to_field(), debtor.to_field()]);\n                let current_balance = storage.group_balances.at(key).read() as u64;\n                let new_balance = current_balance + amount_per_participant;\n                storage.group_balances.at(key).write(new_balance.to_field());\n\n                // Emit event for the split\n                context.emit_unencrypted_log([creditor.to_field(), debtor.to_field(), amount_per_participant.to_field()]);\n            }\n        }\n    }\n}\n","path":"/Users/niallcheetham/dev/aztec/testing/splitwisePub/publicgroups/src/main.nr"},"94":{"source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\nuse crate::hash::ArgsHasher;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"133":{"source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"157":{"source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/initializer.nr"},"158":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::oracle::logs_traits::ToBytesForUnencryptedLog;\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (n as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"172":{"source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"181":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, UnconstrainedContext> where T: Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"235":{"source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"301":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"304":{"source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x2499880e2b1b831785c17286f99a0d5122fee784ce7b1c04e380c4a991da819a;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"306":{"source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"307":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"310":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"311":{"source":"use crate::{\n    crate::address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"319":{"source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"}}}